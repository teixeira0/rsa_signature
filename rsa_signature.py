# Cifra AES
# Rodrigo Teixeira Soares	19/0019760

import sys
import binascii
import random

sbox = [
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
    ]

inverse_sbox = [
	0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
]

rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]

def generate_aes_key():
	key = []
	for i in range(128):
		key.append(str(random.randint(0,1)))
	print("Generated key:")
	print('%x' % (int(''.join(key),2)))
	key = bytearray.fromhex('%x' % (int(''.join(key),2)))
	return key

def rotword(word):
	result = bytearray([word[1], word[2], word[3], word[0]])
	return result

def subword(word):
	result = bytearray([sbox[word[0]], sbox[word[1]], sbox[word[2]], sbox[word[3]]])
	return result

def key_schedule(key):
	key_words = [key[0:4], key[4:8], key[8:12], key[12:16]]
	for i in range(44)[4:]:
		newword = bytearray()
		if (i % 4 == 0):
			new_word = bytearray([a ^ b ^ c for a,b,c in zip(key_words[i-4], subword(rotword(key_words[i-1])),bytearray([rcon[(i//4)-1],0,0,0]))])
		else:
			new_word = bytearray([a ^ b for a,b in zip(key_words[i-4], key_words[i-1])])
		key_words.append(new_word)
	expanded_key = [b''.join(key_words[0:4]), b''.join(key_words[4:8]), b''.join(key_words[8:12]), b''.join(key_words[12:16]), b''.join(key_words[16:20]), b''.join(key_words[20:24]), b''.join(key_words[24:28]), b''.join(key_words[28:32]), b''.join(key_words[32:36]), b''.join(key_words[36:40]), b''.join(key_words[40:44])]
	print("Expanded key:")
	print([onekey.hex() for onekey in expanded_key])

	return expanded_key

def add_round_key(key, state):
	state = bytearray([a ^ b for a, b in zip(key, state)])
	return state

def s_box(state):
	state = bytearray([sbox[a] for a in state])
	return state

def shift_rows(state):
	rows = [bytearray([state[0], state[4], state[8], state[12]]), [state[1], state[5], state[9], state[13]], [state[2], state[6], state[10], state[14]], [state[3], state[7], state[11], state[15]]]
	# Row 1
	rows[1] = bytearray([rows[1][1], rows[1][2], rows[1][3], rows[1][0]])
	# Row 2
	rows[2] = bytearray([rows[2][2], rows[2][3], rows[2][0], rows[2][1]])
	# Row 3
	rows[3] = bytearray([rows[3][3], rows[3][0], rows[3][1], rows[3][2]])
	state = bytearray([rows[0][0], rows[1][0], rows[2][0], rows[3][0], rows[0][1], rows[1][1], rows[2][1], rows[3][1], rows[0][2], rows[1][2], rows[2][2], rows[3][2], rows[0][3], rows[1][3], rows[2][3], rows[3][3]])
	return state

def mix_columns(state):
	columns = [state[0:4], state[4:8], state[8:12], state[12:16]]
	new_columns = []
	for column in columns:
		times_two = [0, 0, 0, 0]
		for i in range(4):
			has_high_bit = (column[i] >> 7) & 1
			times_two[i] = column[i] << 1
			times_two[i] ^= has_high_bit * 0x11b
		new_column = bytearray([0, 0, 0, 0])
		new_column[0] = times_two[0] ^ column[3] ^ column[2] ^ times_two[1] ^ column[1]
		new_column[1] = times_two[1] ^ column[0] ^ column[3] ^ times_two[2] ^ column[2]
		new_column[2] = times_two[2] ^ column[1] ^ column[0] ^ times_two[3] ^ column[3]
		new_column[3] = times_two[3] ^ column[2] ^ column[1] ^ times_two[0] ^ column[0]
		new_columns.append(new_column)
	state = bytearray(b''.join(new_columns))
	return state

def aes_cypher(message):
	print("Cyphering...")
	key = generate_aes_key()
	print("Key:")
	print(key.hex())
	message_bytes = bytearray.fromhex(message.encode().hex())
	print("Hex message:")
	print(message_bytes.hex())
	expanded_key = key_schedule(key)
	# First round
	state  = add_round_key(expanded_key[0], message_bytes)
	print("Add round key:")
	print(state.hex())
	for i in range(11)[1:]:
		state = s_box(state)
		print("Round " + str(i) + " after S-box:")
		print(state.hex())
		state = shift_rows(state)
		print("Round " + str(i) + " after shift rows:")
		print(state.hex())
		if (i != 10):
			state = mix_columns(state)
			print("Round " + str(i) + " after mix columns:")
			print(state.hex())
		state  = add_round_key(expanded_key[i], state)
		print("Round " + str(i) + " after add round key:")
		print(state.hex())

	print("Cypher complete!")
	return result, key.hex()

# This function decyphers a given message
def aes_decypher(message, key):
	print("Decyphering...")
	result  = ""
	
	print("Decyphering complete!")
	return result


# python3 rsa_signature.py 1/2/3/4/5 c/d message.txt key.txt result.txt

if (len(sys.argv) != 6):
	raise Exception("Invalid arguments!")

operation = sys.argv[1]
suboperation = sys.argv[2]
message_file = sys.argv[3]
key_file = sys.argv[4]
result_file = sys.argv[5]
message = ""
key = ""
result = ""

with open(message_file) as f:
	message = f.read()

if (operation == "1"):
	if (suboperation == "c"):
		result, key = aes_cypher(message) 
		# Saving key to file
		with open(key_file, "w") as f:
			f.write(key)	
		
		# Saving to file
		with open(result_file, "w") as f:
			f.write(result)
	else:
		raise Exception("Invalid sub operation!")
else:
	raise Exception("Invalid operation!")
